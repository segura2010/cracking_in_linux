PARA VER EL ESQUEMA VISUAL:
sudo aptitude install xdot

comparamos el crackme con el mismo para solor ver el grafico de cracme:
radiff2 -g main crackme.bin crackme.bin > /tmp/a &
y luego vemos el grafico
xdot /tmp/a

si quisieramos comparar dos binarios:
radiff2 -g main crackme1 crackme2 > /tmp/a &
radiff2 -g main crackme2 crackme1 > /tmp/b &
xdot /tmp/a
xdot /tmp/b
Los bloques marcados en amarillo son los que cambiaron.

VER STRINGS:
strings -t x programa (nos muestra los strings y los 3 ultimos digitos de la direccion en hexadecimal de donde se encuentra)
tambien podemos usar: 
rabin2 -z crackme

y para ver toda la info:
rabin2 -g crackme

CONVERTIR DE HEX A STRING IVICEVERSA:
rax2 -S hola (de string a hexadecimal)
rax2 -s 686f6c61 (de hexadecimal a string)

Si editamos un string lo ideal es que sea de la misma longitud de chars (espacios en blanco valen tambien)
Si es de mayor longitud se pueden colar otros strings teniendo un comportamiento extraño. Y si es menor 
se mezclara el nuevo string con el viejo string.  

Si por ejemplo el string es www.blender.org y vamos a reemplazarlo por www.google.es que es menor sobrarian 2 char.
Podemos poner 00 para que no exista caracteres sobrantes. 

EJECUCION:
radare2 -d programa (entramos en modo debugger solo lectura)
radare2 -w programa (entramos en modo escritura)

para ir al principio de todo el archivo: 
s 0

para ir a un lugar:
s 0x00400d04

EDITAR:
luego para editarlo (entramos en modo edicion: radare2 -w programa):
si esta en jz (74 tambien conocido como je), lo podemos poner en jnz (75 tambien conocido como jne):
primero vamos a la linea en concreto:
s 0x00400d04 
y luego:
wx 75

#otro ejemplo esta vez con wa A MI PERSONALMENTE ME DA VIOLACION DE SEGMENTO (write assembly):
#vamos a su sitio:
#s  0x00400d04
#vemos el contenido:
#[0x00400d04]> pd 1
#        ,=< 0x00400d04    741e         jz 0x400d24
#editamos:
#[0x00400d04]> wa jnz 0x400d24
#Written 6 bytes ( jnz 0x400d24)=wx 0f851a000000
#volvemos a ver el contenido:
#[0x00400d04]> pd 1
#        ,=< 0x00400d04    0f851a000000 jnz 0x400d24
#con wao? vemos las posibilidades

INFORMACION:
con la i podemos ver informacion del programa

AYUDA:
usamos ? para ver la ayuda o s?, w?, etc... para ver las ayudas de opciones en concreto... 

FLAGS:
con fs vemos los flags 
y con fs strings seleccionamos el flag strings
y con f vemos los strings

DESENSAMBLADO:
con pd vemos el codigo desensamblado
pd 10 muestra solo las proximas 10 lineas desde donde estemos
con V vemos en modo visual y dentro de modo visual con la p podemos ir viendo en diferentes modos

MAIN ENSAMBLADOR:
para ver el desensamblado en el main:
pdf @ sym.main

si estuviera stripeado ( Invalid address (sym.main) ) puedes probar con:
pdf @ main

para saber si esta estripeado prueba con i y veras un: strip   true

tambien admite tuberias con less y grep etc :D
pdf @ sym.main | grep -i stringabuscar

HTE:
(para instalar hte en debian aptitude install ht)
con el hte podemos editar viendo las direcciones de pdf @ sym.main en modo Elf/image
Tambien en hte en modo Elf/image podemos hacer un Got To y escribimos main y nos lleva al main. 

en hte Podemos buscar el string de modo insensitive en modo Elf/image y seleccionar la referencia (xref y luego pulsamos enter) y nos llevara a su lugar :D


ENSAMBLADOR:
JZ (JE) = 74
JNZ (JNE) = 75
NOP = 90
JMP = EB

saltos:
	jmp		jump				EB		
	je	==	jump if equal			74
	jne	!=	jump if not equal		75
	jg	>	jump if greater than		7F
	jge	>=	jump if greater than or equal	7D
	jl	<	jump if less than		7C
	jle	<=	jump if less than or equal	7E
	jz	== 0	jump if it's equal to 0		75
	jnz	!= 0	jump if it's not equal to 0	74


DEBUGEO:
do reabrir el programa
dc continuar con la ejecucion
db sym.main        add breakpoint into sym.main
db 0x804800        add breakpoint
db -0x804800       remove breakpoint


Tambien hay un software llamado bokken pero en mi debian testing ahora mismo esta fuera de repos (tiene problemas, habrá que esperar). 

para saltos E9 long jumps:
traducir ordenes de asm a hexadecimal:
rasm2 -a x86 'jmp 0x00400eb5'
rasm2 -a x86 -b 64 'jmp 0x00400eb5'

Se considera short jump cuando es inferior a 0x80

offset relativo de rel8 eip short jmp:
primer digito del    [0]  al  [7]
segundo digito de la [a] a la [f]

formula:
direccion_propia + 2 + el_offset_relativo = lan_ueva_direccion
osea ejemplo:

pd 10
        ,=< 0x00400eb3    741e         jz 0x400ed3
        |   0x00400eb5    beb0124000   mov esi, str.Enhorabuena
        |   0x00400eba    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4
        |   0x00400ebf    e82cfdffff   call sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
        |      0x00400bf0() ; sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
        |   0x00400ec4    be900c4000   mov esi, sym.imp._ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        |   0x00400ec9    4889c7       mov rdi, rax
        |   0x00400ecc    e8affdffff   call sym.imp._ZNSolsEPFRSoS_E
        |      0x00400c80() ; sym.imp._ZNSolsEPFRSoS_E
       ,==< 0x00400ed1    eb1c         jmp 0x400eef
       |`-> 0x00400ed3    bebd124000   mov esi, str.No
       |    0x00400ed8    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4
b3 + 2 = b5 + 1e = d3
puedes hacer las sumas aqui http://es.ncalculators.com/digital-computation/hex-addition-calculadora.htm
o en python hex(0xb3 + 2 + 0x1e)

GENERADOR DE OFFSETS PARA JMP SHORT en python by zebus3d:
O tambien puedo usar mi propio generador de offsets que me he hecho :DDDDD
https://github.com/zebus3d/cracking_in_linux/blob/master/get_relative_offset.py


The first byte of a SHORT Jump is always EB and the 
second is a relative offset from 00h to 7Fh for Forward jumps, and 
from 80h to FFh for Reverse (or Backward) jumps.

If a JMP forward is Destination - Origin, then a JMP backward would be Origin - Destination

mas informacion -> http://thestarman.pcministry.com/asm/2bytejumps.htm
short jumps son EB seguido del offset relativo:
ejemplos:

[0x00400eb3]> wx eb00
[0x00400eb3]> pd 3
        ,=< 0x00400eb3    eb00         jmp 0x400eb5
        `-> 0x00400eb5    beb0124000   mov esi, str.Enhorabuena
            0x00400eba    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4

[0x00400eb3]> wx eb05
[0x00400eb3]> pd 3
        ,=< 0x00400eb3    eb05         jmp 0x400eba
        |   0x00400eb5    beb0124000   mov esi, str.Enhorabuena
        `-> 0x00400eba    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4
        
[0x00400eb3]> wx eb0a
[0x00400eb3]> pd 10
        ,=< 0x00400eb3    eb0a         jmp 0x400ebf
        |   0x00400eb5    beb0124000   mov esi, str.Enhorabuena
        |   0x00400eba    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4
        `-> 0x00400ebf    e82cfdffff   call sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc

[0x00400eb3]> wx eb0f
[0x00400eb3]> pd 6
        ,=< 0x00400eb3    eb0f         jmp 0x400ec4
        |   0x00400eb5    beb0124000   mov esi, str.Enhorabuena
        |   0x00400eba    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4
        |   0x00400ebf    e82cfdffff   call sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
        |      0x00400bf0() ; sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
        `-> 0x00400ec4    be900c4000   mov esi, sym.imp._ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_

[0x00400eb3]> wx eb1e
[0x00400eb3]> pd 9
        ,=< 0x00400eb3    eb1e         jmp 0x400ed3
        |   0x00400eb5    beb0124000   mov esi, str.Enhorabuena
        |   0x00400eba    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4
        |   0x00400ebf    e82cfdffff   call sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
        |      0x00400bf0() ; sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
        |   0x00400ec4    be900c4000   mov esi, sym.imp._ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        |   0x00400ec9    4889c7       mov rdi, rax
        |   0x00400ecc    e8affdffff   call sym.imp._ZNSolsEPFRSoS_E
        |      0x00400c80() ; sym.imp._ZNSolsEPFRSoS_E
       ,==< 0x00400ed1    eb1c         jmp 0x400eef
       |`-> 0x00400ed3    bebd124000   mov esi, str.No

[0x00400eb3]> wx eb70        
[0x00400eb3]> pd 40
        ,=< 0x00400eb3    eb70         jmp 0x400f25
        |   0x00400eb5    beb0124000   mov esi, str.Enhorabuena
        |   0x00400eba    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4
        |   0x00400ebf    e82cfdffff   call sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
        |      0x00400bf0() ; sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
        |   0x00400ec4    be900c4000   mov esi, sym.imp._ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        |   0x00400ec9    4889c7       mov rdi, rax
        |   0x00400ecc    e8affdffff   call sym.imp._ZNSolsEPFRSoS_E
        |      0x00400c80() ; sym.imp._ZNSolsEPFRSoS_E
       ,==< 0x00400ed1    eb1c         jmp 0x400eef
       ||   0x00400ed3    bebd124000   mov esi, str.No
       ||   0x00400ed8    bf201a6000   mov edi, sym._ZSt4coutGLIBCXX_3.4
       ||   0x00400edd    e80efdffff   call sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
       ||      0x00400bf0() ; sym.imp._ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
       ||   0x00400ee2    be900c4000   mov esi, sym.imp._ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
       ||   0x00400ee7    4889c7       mov rdi, rax
       ||   0x00400eea    e891fdffff   call sym.imp._ZNSolsEPFRSoS_E
       ||      0x00400c80() ; sym.imp._ZNSolsEPFRSoS_E
       `--> 0x00400eef    488d45a0     lea rax, [rbp-0x60]
        |   0x00400ef3    4889c7       mov rdi, rax
        |   0x00400ef6    e815fdffff   call sym.imp._ZNSsD1Ev
        |      0x00400c10() ; sym.imp._ZNSsD1Ev
        |   0x00400efb    488d45b0     lea rax, [rbp-0x50]
        |   0x00400eff    4889c7       mov rdi, rax
        |   0x00400f02    e809fdffff   call sym.imp._ZNSsD1Ev
        |      0x00400c10() ; sym.imp._ZNSsD1Ev
        |   0x00400f07    b800000000   mov eax, 0x0
      ,===< 0x00400f0c    eb74         jmp 0x400f82
      | |   0x00400f0e    4889c3       mov rbx, rax
      | |   0x00400f11    488d45bf     lea rax, [rbp-0x41]
      | |   0x00400f15    4889c7       mov rdi, rax
      | |   0x00400f18    e843fdffff   call sym.imp._ZNSaIcED1Ev
      | |      0x00400c60() ; sym.imp._ZNSaIcED1Ev
      | |   0x00400f1d    4889d8       mov rax, rbx
     ,====< 0x00400f20    eb58         jmp 0x400f7a
     || |   0x00400f22    4889c3       mov rbx, rax
     || `-> 0x00400f25    488d45e0     lea rax, [rbp-0x20]

